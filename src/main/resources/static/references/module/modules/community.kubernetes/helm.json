{"helm": {
        "version": "0.11.0",
        "collection_version": "2.1.1",
        "deprecated": "yes",
        "removedin": "",
        "alias": "",
        "replacedby": "kubernetes.core.helm",
        "namespace": "community.kubernetes",
        "categorygroup": "" ,
        "category": "",
        "short_description": "Manages Kubernetes packages with the Helm package manager",
        "returndocs": {
            "command": {
                "description": "Full `helm` command built by this module, in case you want to re-run the command outside the module or debug a problem.",
                "full_key": "[&quot;command&quot;]",
                "returned": "always",
                "sample": "&quot;helm upgrade ...&quot;",
                "type": "str"
            },
            "status": {
                "contains": {
                    "appversion": {
                        "description": "Version of app deployed",
                        "full_key": "[&quot;status&quot;, &quot;appversion&quot;]",
                        "returned": "always",
                        "type": "str"
                    },
                    "chart": {
                        "description": "Chart name and chart version",
                        "full_key": "[&quot;status&quot;, &quot;chart&quot;]",
                        "returned": "always",
                        "type": "str"
                    },
                    "name": {
                        "description": "Name of the release",
                        "full_key": "[&quot;status&quot;, &quot;name&quot;]",
                        "returned": "always",
                        "type": "str"
                    },
                    "namespace": {
                        "description": "Namespace where the release is deployed",
                        "full_key": "[&quot;status&quot;, &quot;namespace&quot;]",
                        "returned": "always",
                        "type": "str"
                    },
                    "revision": {
                        "description": "Number of time where the release has been updated",
                        "full_key": "[&quot;status&quot;, &quot;revision&quot;]",
                        "returned": "always",
                        "type": "str"
                    },
                    "status": {
                        "description": "Status of release (can be DEPLOYED, FAILED, ...)",
                        "full_key": "[&quot;status&quot;, &quot;status&quot;]",
                        "returned": "always",
                        "type": "str"
                    },
                    "updated": {
                        "description": "The Date of last update",
                        "full_key": "[&quot;status&quot;, &quot;updated&quot;]",
                        "returned": "always",
                        "type": "str"
                    },
                    "values": {
                        "description": "Dict of Values used to deploy",
                        "full_key": "[&quot;status&quot;, &quot;values&quot;]",
                        "returned": "always",
                        "type": "str"
                    }
                },
                "description": "A dictionary of status output",
                "full_key": "[&quot;status&quot;]",
                "returned": "on success Creation/Upgrade/Already deploy",
                "type": "complex"
            },
            "stderr": {
                "description": "Full `helm` command stderr, in case you want to display it or examine the event log",
                "full_key": "[&quot;stderr&quot;]",
                "returned": "always",
                "sample": "&quot;&quot;",
                "type": "str"
            },
            "stdout": {
                "description": "Full `helm` command stdout, in case you want to display it or examine the event log",
                "full_key": "[&quot;stdout&quot;]",
                "returned": "always",
                "sample": "&quot;&quot;",
                "type": "str"
            }
        },
        "description": "Install, upgrade, delete packages with the Helm package manager.",
        "docuri": "helm",
        "plainexamples": "\n- name: Deploy latest version of Prometheus chart inside monitoring namespace (and create it)\n community.kubernetes.helm:\n    name: test\n    chart_ref: stable/prometheus\n    release_namespace: monitoring\n    create_namespace: true\n\n# From repository\n- name: Add stable chart repo\n community.kubernetes.helm_repository:\n    name: stable\n    repo_url: &quot;https://kubernetes.github.io/ingress-nginx&quot;\n\n- name: Deploy latest version of Grafana chart inside monitoring namespace with values\n community.kubernetes.helm:\n    name: test\n    chart_ref: stable/grafana\n    release_namespace: monitoring\n    values:\n      replicas: 2\n\n- name: Deploy Grafana chart on 5.0.12 with values loaded from template\n community.kubernetes.helm:\n    name: test\n    chart_ref: stable/grafana\n    chart_version: 5.0.12\n    values: &quot;{{ lookup(&#x27;template&#x27;, &#x27;somefile.yaml&#x27;) | from_yaml }}&quot;\n\n- name: Deploy Grafana chart using values files on target\n community.kubernetes.helm:\n    name: test\n    chart_ref: stable/grafana\n    release_namespace: monitoring\n    values_files:\n      - /path/to/values.yaml\n\n- name: Remove test release and waiting suppression ending\n community.kubernetes.helm:\n    name: test\n    state: absent\n    wait: true\n\n# From git\n- name: Git clone stable repo on HEAD\n  ansible.builtin.git:\n    repo: &quot;http://github.com/helm/charts.git&quot;\n    dest: /tmp/helm_repo\n\n- name: Deploy Grafana chart from local path\n community.kubernetes.helm:\n    name: test\n    chart_ref: /tmp/helm_repo/stable/grafana\n    release_namespace: monitoring\n\n# From url\n- name: Deploy Grafana chart on 5.6.0 from url\n community.kubernetes.helm:\n    name: test\n    chart_ref: &quot;https://github.com/grafana/helm-charts/releases/download/grafana-5.6.0/grafana-5.6.0.tgz&quot;\n    release_namespace: monitoring\n\n# Using complex Values\n- name: Deploy new-relic client chart\n community.kubernetes.helm:\n    name: newrelic-bundle\n    chart_ref: newrelic/nri-bundle\n    release_namespace: default\n    force: True\n    wait: True\n    replace: True\n    update_repo_cache: True\n    disable_hook: True\n    values:\n      global:\n        licenseKey: &quot;{{ nr_license_key }}&quot;\n        cluster: &quot;{{ site_name }}&quot;\n      newrelic-infrastructure:\n        privileged: True\n      ksm:\n        enabled: True\n      prometheus:\n        enabled: True\n      kubeEvents:\n        enabled: True\n      logging:\n        enabled: True\n",
        "metadata": "None",
        "notes": "",
        "requirements": ["helm (https://github.com/helm/helm/releases)","yaml (https://pypi.org/project/PyYAML/)"],
        "authors": "<ul><li>Lucas Boisserie (@LucasBoisserie)<br/></li><li>Matthieu Diehr (@d-matt)</li></ul>",
        "arguments": {
            "api_key": ["","1.2.0",[], "", "", "str", [], "Token used to authenticate with the API. Can also be specified via <code>K8S_AUTH_API_KEY</code> environment variable.",{
            }],
            "atomic": ["","",[], "", "False", "bool", [], "If set, the installation process deletes the installation on failure.",{
            }],
            "binary_path": ["","",[], "", "", "path", [], "The path of a helm binary to use.",{
            }],
            "ca_cert": ["","1.2.0",[], "", "", "path", ["ssl_ca_cert"], "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via <code>K8S_AUTH_SSL_CA_CERT</code> environment variable.",{
            }],
            "chart_ref": ["","",[], "", "", "path", [], "chart_reference on chart repository.<br/>path to a packaged chart.<br/>path to an unpacked chart directory.<br/>absolute URL.<br/>Required when <em>release_state</em> is set to <code>present</code>.",{
            }],
            "chart_repo_url": ["","",[], "", "", "str", [], "Chart repository URL where to locate the requested chart.",{
            }],
            "chart_version": ["","",[], "", "", "str", [], "Chart version to install. If this is not specified, the latest version is installed.",{
            }],
            "context": ["","",[], "", "", "str", ["kube_context"], "Helm option to specify which kubeconfig context to use.<br/>If the value is not specified in the task, the value of environment variable <code>K8S_AUTH_CONTEXT</code> will be used instead.",{
            }],
            "create_namespace": ["","0.11.1",[], "", "False", "bool", [], "Create the release namespace if not present.",{
            }],
            "disable_hook": ["","",[], "", "False", "bool", [], "Helm option to disable hook on install/upgrade/delete.",{
            }],
            "force": ["","",[], "", "False", "bool", [], "Helm option to force reinstall, ignore on new install.",{
            }],
            "host": ["","1.2.0",[], "", "", "str", [], "Provide a URL for accessing the API. Can also be specified via <code>K8S_AUTH_HOST</code> environment variable.",{
            }],
            "kubeconfig": ["","",[], "", "", "path", ["kubeconfig_path"], "Helm option to specify kubeconfig path to use.<br/>If the value is not specified in the task, the value of environment variable <code>K8S_AUTH_KUBECONFIG</code> will be used instead.",{
            }],
            "purge": ["","",[], "", "True", "bool", [], "Remove the release from the store and make its name free for later use.",{
            }],
            "release_name": ["yes","",[], "", "", "str", ["name"], "Release name to manage.",{
            }],
            "release_namespace": ["yes","",[], "", "", "str", ["namespace"], "Kubernetes namespace where the chart should be installed.",{
            }],
            "release_state": ["","",["present","absent"], "present", "", "str", ["state"], "Desirated state of release.",{
            }],
            "release_values": ["","",[], "", "{}", "dict", ["values"], "Value to pass to chart.",{
            }],
            "replace": ["","1.11.0",[], "", "False", "bool", [], "Reuse the given name, only if that name is a deleted release which remains in the history.<br/>This is unsafe in production environment.",{
            }],
            "skip_crds": ["","1.2.0",[], "", "False", "bool", [], "Skip custom resource definitions when installing or upgrading.",{
            }],
            "update_repo_cache": ["","",[], "", "False", "bool", [], "Run <code>helm repo update</code> before the operation. Can be run as part of the package installation or as a separate step.",{
            }],
            "validate_certs": ["","1.2.0",[], "", "True", "bool", ["verify_ssl"], "Whether or not to verify the API server&#x27;s SSL certificates. Can also be specified via <code>K8S_AUTH_VERIFY_SSL</code> environment variable.",{
            }],
            "values_files": ["","1.1.0",[], "", "[]", "list", [], "Value files to pass to chart.<br/>Paths will be read from the target host&#x27;s filesystem, not the host running ansible.<br/>values_files option is evaluated before values option if both are used.<br/>Paths are evaluated in the order the paths are specified.",{
            }],
            "wait": ["","",[], "", "False", "bool", [], "Wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment are in a ready state before marking the release as successful.",{
            }],
            "wait_timeout": ["","",[], "", "", "str", [], "Timeout when wait option is enabled (helm2 is a number of seconds, helm3 is a duration).",{
            }]
        }
    }
}
